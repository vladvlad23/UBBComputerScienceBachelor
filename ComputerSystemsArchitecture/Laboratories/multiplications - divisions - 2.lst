     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 0A                          a db 10
    14 00000001 0A                          b db 10
    15 00000002 0A                          c db 10
    16 00000003 00                          d db 0
    17                                      
    18 00000004 0000                        e dw 0
    19 00000006 0000                        f dw 0
    20 00000008 2800                        g dw 40
    21 0000000A 0000                        h dw 0
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26 00000000 A0[00000000]                    mov AL, [a] ; AL = a
    27 00000005 0205[01000000]                  add AL, [b] ; AL = a+b 
    28 0000000B 0205[02000000]                  add AL, [c] ; AL = a+b+c
    29 00000011 B102                            mov CL, 2 ; CL=2
    30 00000013 F6E1                            mul CL ; AX = (a+b+c)*2 - not sure if i should move back to AL (or if at all possible as the number might be too big)
    31 00000015 66B90300                        mov CX, 3
    32 00000019 66F7E1                          mul CX ; DX:AX = [(a+b+c)*2]*3
    33 0000001C 668B0D[08000000]                mov CX, [g]
    34 00000023 66F7F1                          div CX ; AX = DX:AX/CX and DX = DX:AX%CX < = > AX = [(a+b+c)*2]*3/g and DX= [(a+b+c)*2]*3%g
    35                                      
    36                                          ; exit(0)
    37 00000026 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    38 00000028 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
