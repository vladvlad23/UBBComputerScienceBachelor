from client import *
from movie import *
from rental import *
from random import *

def addMovie(movie,movieList):
    '''
    :param Movie: Movie to be added
    :param movieList: List of movies where it has to be added
    :return:
    '''
    try:
        searchMovieWithId(movieList,movie.getMovieId())
        raise Exception("Movie already exists")
    except Exception:
        movieList.append(movie)

def addMovieAtIndex(movieList,movie,index):
    '''
    Function will add a movie in a list at a specific index
    :param movieList: the list of movies where the movie should be inserted
    :param movie: the movie which should be inserted
    :param index: the index where it should be inserted
    '''
    movieList.insert(index,movie)


def addStartingMovies(movieList):
    '''
    Function will generate 100 Movie class entries that will be added in a list
    :param movieList: the list where the entries should be added
    '''

    addMovie(Movie(1, "Pulp Fiction", "2 hitmen have a penchant for discussions", "action"),movieList)
    addMovie(Movie(2, "Reservoir Dogs","Six criminals are hired to carry a robbery", "action"),movieList)
    addMovie(Movie(3, "Batman", "The classical DC hero", "action"),movieList)
    addMovie(Movie(4, "12 angry men", "A jury tries to bring justice in a crime", "crime"),movieList)
    addMovie(Movie(5, "Django Unchained", "A slave and a bounty hunter go on a mission","adventure"),movieList)

    for i in range (6,100+1):
        movie = Movie(i,randomTitleGenerator(),randomDescriptionGenerator(),randomGenreGenerator())
        addMovie(movie,movieList)

def randomGenreGenerator():
    '''
    The function will create a list of movie genres and return a random genre from it
    :return: a random genre
    '''

    possibleGenres = ["action","adventure","crime","comedy","drama","fantasy","horror","musical",
                      "wester","thriller"]

    randomIndex = randint(0,len(possibleGenres)-1)

    randomGenre = possibleGenres[randomIndex]
    return randomGenre

def randomTitleGenerator():
    '''
    The function will generate a random title from a list of nouns, a list of adjectives and
    a list of articles/numerals/others ("the","some" etc)

    :return: a string containing the concatenation of 2 random strings from the list of adjectives and
    nouns separated and preceded by an article
    '''

    nouns = ["men","women","Christmas","mouse","bullet","car","lamp","dog","ghost","story",
             "bat","hero","drunk","holiday","tornado","cowboy"]

    adjectives = ["angry","happy","drunk","fast","unusual","accidental","extreme","bored",
                  "merciful","scared","haunted"]

    precedingList = ["The","Some","Any","The third","The first","The chosen","The Story of the"]


    randomNoun = nouns[randint(0,len(nouns)-1)]
    randomAdjective = adjectives[randint(0,len(adjectives)-1)]
    randomPreceding = precedingList[randint(0,len(precedingList)-1)]

    hasPreceding = randint(0,1000)
    if (hasPreceding%2)==0:
        finalRandomTitle = randomPreceding + " " + randomAdjective+ " "+ randomNoun
    else:
        finalRandomTitle = randomAdjective + " " + randomNoun
    return finalRandomTitle

def randomDescriptionGenerator():
    '''
    Function will return a random description generated by a number of lists containing general
    nouns, adjectives, verbs
    :return: a random string containing a random description
    '''

    generalNouns = ["A man","A woman","","A very active person",
                    "A mysterious man","A problem kid","A grieving widow","A scared boy"]

    generalVerbs = ["finds itself","grows into","depends on","is distracted by","finds itself in trouble with",
                   "gets hurt attempting to aid"]

    generalAdjective = ["another one", "someone different","an unusual situation","a trivial thing",
                        "its creator", "an unusual individual","many troublesome events","a series of unfortunate events"]

    randomNoun = generalNouns[randint(0,len(generalNouns)-1)]
    randomVerb = generalVerbs[randint(0,len(generalVerbs)-1)]
    randomAdjective = generalAdjective[randint(0,len(generalVerbs)-1)]

    finalRandomDescription = randomNoun + " " + randomVerb + " " + randomAdjective
    return finalRandomDescription

def addClient(clientList,client):
    '''
    Function adds client to a list of clients. If the client is already there, throw an exception

    :param client: client to be added to list
    :param clientList: list where the client will be added
    :return:
    '''
    for clients in range(0,len(clientList)):
        if clientList[clients].getClientId()==client.getClientId():
            raise Exception("Client already in list")

    for i in clientList:
        if client.getClientId() == i.getClientId():
            raise Exception("Client already in list")
            return
    clientList.append(client)

def addClientAtIndex(clientList,client,index):
    '''
    Function will add a client in a list at a specific index
    :param clientList: the list of clients where the client should be inserted
    :param client: the client whom should be inserted
    :param index: the index where it should be inserted
    '''
    clientList.insert(index,client)

def addRental(rental,rentalList):
    '''
    Function will add a rental to rental list

    :param rental: the rental instance to be added in the list
    :param rentalList: the rental list where it has to be added
    :return:
    '''

    if not rental in rentalList:
        rentalList.append(rental)
    else:
        raise Exception("Rental already in list")


def addStartingClients(clientList):
    '''
    Function will generate a list of 100 Client entries that will be added to a list
    :param clientList: the list where the generated entries should be added
    '''
    addClient(clientList,Client(1,"Georgescu George"))
    addClient(clientList,Client(2,"Grigorescu Grigore"))
    addClient(clientList,Client(3,"Marinescu Marian"))
    addClient(clientList,Client(4,"Ionescu Ioan"))
    addClient(clientList,Client(5,"Popescu Pop"))

    for i in range(6,100+1):
        name = randomClientNameGenerator()
        addClient(clientList,Client(i,randomClientNameGenerator()))


def randomClientNameGenerator():
    '''
    Function will define a list of last names and a list of first names. It will randomly pick from
    each list an element. They will be concatenated and separated by a space. The final result
    will be the random name generated
    :return: random string of a fist name and last name picked in the function randomly and separated by space
    '''
    lastNames = ["Iacoban","Ungureanu","Pop","Popescu","Georgescu","Popa","Alexandrescu",
                  "Marinescu","Morohoschi","Circiu","Piticari","Bazga","Paduraru","Olar",
                  "Visinescu","Alexandri","Alibaba","Florea","Margean","Zdrob","Taran"]

    firstNames = ["Andrei","Alexandru","Tudor","Toader","Cristian","Dorin","Dorinel",
                  "Vlad","Vladimir","Ioan","Ionut","Aspazia","Andreea","Alexandra","Georgiana",
                  "Camelia","Adriana","Adina","Alina","Adrian","Alin","George","Grigore"]

    randomLastName = lastNames[randint(0,len(lastNames)-1)]
    randomFirstName = firstNames[randint(0,len(firstNames)-1)]

    randomName = randomLastName + " " + randomFirstName
    return randomName

def addStartingRentals(rentalList,clientList):
    '''
    Function will generate a list of 100 rental entries that will be added to a list
    :param rentalList: the list where the entries should be added
    :param clientList: this is to aid in creating rentals that haven't been returned
    '''
    addRental(Rental(1,1,1,date(2000,1,1),date(2000,1,6),date(2000,1,1)),rentalList)
    addRental(Rental(2,2,2,date(2000,1,2),date(2000,1,6),date(2000,1,3)),rentalList)
    addRental(Rental(3,3,3,date(2000,1,3),date(2000,1,7),date(2000,1,5)),rentalList)
    addRental(Rental(4,4,4,date(2000,1,5),date(2000,1,10),date(2000,1,7)),rentalList)
    addRental(Rental(5,5,5,date(2000,1,4),date(2000,1,8),date(2000,1,8)),rentalList)

    for i in range(6,150+1):
        movieId = randint(1,100)
        clientId = randint(1,100)
        randomRentalDate = generateDateOfRental()
        randomDueDate = generateDueDate(randomRentalDate)
        randomReturnedDate = generateReturnDate(randomRentalDate)

        if searchClientById(clientList,clientId).getRentedStatus() == False:
            addRental(Rental(i,movieId,clientId,randomRentalDate,randomDueDate,randomReturnedDate),rentalList)
            clientList[clientList.index(searchClientById(clientList,clientId))].changeRentedStatus()


def generateReturnDate(rentalDate):
    '''
    Function will generate a random return date past the rental date(up until 120 days)
    :return: a random date according to the conditions
    '''

    hasReturned = randint(1,100)
    if hasReturned < 10:
        return None

    randomDays = randint(1,120)
    randomReturnDate = rentalDate + timedelta(days = randomDays)
    return randomReturnDate


def generateDateOfRental():
    '''
    Function will generate a random date using the date(day
    :return: a random date using the constructor date(year,month,day)
    '''
    try:
        day = randint(1,31) #the last day is used for inventory of the store :)
        month = randint(1,12)
        year = randint(1990,2017)
        return date(year,month,day)
    except ValueError: #if the date isn't oki, generate another one
        return generateDateOfRental()

def generateDueDate(rentalDate):
    '''
    Function will generate a random due date after the given date with 1-14 days
    :param rentalDate:
    :return: a random date after the given date
    '''

    randomDays = randint(2,15)
    randomDueDate = rentalDate + timedelta(days = randomDays)
    return randomDueDate


